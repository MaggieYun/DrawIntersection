//找到canvas容器
var canvas = document.getElementById('map');

// 获取绘图上下文
var ctx = canvas.getContext('2d');

/**
 * 随机生成一个canvas范围内的像素坐标位置
 */
var simulateData = function() {
	var x = Math.round(Math.random() * (canvas.width - 10));
	var y = Math.round(Math.random() * (canvas.height - 10));
	return [ x, y ];
};

/**
 * 用于存储模拟网格节点
 */
var points = [];

/**
 * 用于存储线
 */
var segments = [];


/**
 * 创建模拟网格节点
 */
var gen_grid = function(size) {
	for ( var i = 0; i <= size - 1; i++) {
		var posxy = simulateData();
		var pos = new Point(posxy[0], posxy[1]);
		var x = pos.getX();
		var y = pos.getY();
		var id = pos.getId();
		// 绘线
		ctx.beginPath();
		ctx.arc(x, y, 5, 0, Math.PI * 2, true);
		points.push(pos);
		ctx.stroke();

		// 标志点名称
		ctx.font = '20px serif';
		ctx.fillStyle = '#FF0000';
		ctx.fillText(id, x + 5, y + 5);
	}

};

/**
 * 连接points中的点
 */
var connect = function(size) {
	for ( var i = 0; i <= size - 1; i++) {
		for ( var j = i + 1; j <= size - 1; j++) {
			//var segment=new Segement(points[i], points[j]);
			//segments.push(segment);
			ctx.moveTo(points[i].getX(), points[i].getY());
			ctx.lineTo(points[j].getX(), points[j].getY());
			ctx.stroke();
		}
	}
	//alert(segments[0].getStartP);
};
/**
 * 寻路
 */
var route = function() {
	Point.endPoint = new Point();
	var startP = $("#startNode").val();// 起点
	var endP = $("#endNode").val();// 终点
	var inAvailablePId = $("#notPass").val().split(" ");// 不可通过点id号,以空格分
	var openList = [];// 开启列表
	var closeList = [];// 关闭列表
	
	//获取不可通达的点列表
	var inAvailablePs=getForm_arr(inAvailablePId,points);
	// 将起点添加至开启列表
	openList.push(points[startP]);
	//当出现下面两种情况之一时，停止；1、将终点B添加至关闭列表。2、开启列表为空。
	while (!openList.length == 0 && closeList.in_arr(endP)) {
		// 遍历开启列表,寻找F值最小的格子，设置为当前格
		var currentPoint = getMinFPoint(openList);
		// 将当前格添加至关闭列表
		closeList.push(currentPoint);
		// 获得当前格的临近格子
		var nearPs = getNeraP(currentPoint);
		//遍历当前格的临近格子----
	    handlerNearPs(currentPoint,nearPs,openList,closeList,inAvailablePs);
	}
};
/**
 * 遍历临近点
 * @param
 */
var handlerNearPs=function(currentPoint,nearPs,openList,closeList,inAvailablePs){
	for(var i=0;i<nearPs.length;i++){
		//如果格子不可通过 || in 关闭列表，
		if(!(inAvailablePs.in_arr(nearPs[i])||closeList.in_arr(nearPs[i]))){
			//如果格子 not in 开启列表,。
			if(!openList.in_arr(nearPs[i])){
				//添加该格子至开启列表
				openList.push(nearPs[i]);
				//并设置当前格为该格子的父格子(setParent里面已经返回G值)
				nearPs[i].setParent(currentPoint);
				//并计算该格子的G值和H值以及F值
				nearPs[i].setH().getH();
				nearPs[i].getF();
			}else{
				if(currentPoint.getG()+nearPs[i].distance(currentPoint)<=nearPs[i].getG()){
					nearPs[i].setParent(currentPoint);
					nearPs[i].setH().getH();
					nearPs[i].getF();
				}
			}
		}
	}
};
/**
 * 计算F值最小点
 */
var getMinFPoint = function(openList) {
		// 顺序比较获得最小值
		for ( var i = 0; i < openList.length; i++) {
			//开启列表只有起点时
			if(i==0){
				var minFPoint = openList[0];// 设第一个点为F值最小点
				var minF = getF(openList[0]);// 设第一个点的F值为最小F值
			}else{
				var tempF = openList[i].getF;
				minFPoint = MinF < tempF ? minFPoint : openList[i];
				minF = MinF < tempF ? MinF : tempF;
			}
		}
	return minFPoint;
};

/**
 * 设置当前点临近点
 */
var setNearByP = function(segement,currentPoint) {
	var nearByPs=[];
	for(var i=0;i<segement.length;i++){
		if(equal(segemnet.getStartP,currentPoint)){
			nearByPs.push(segemnet.getEndP);
		}else if(equal(segemnet.getEndP,currentPoint)){
			nearByPs.push(segemnet.getStartP);
		}
	}
	return setNearByP;
};

/**
 * 刷新
 */
var refesh = function() {
	ctx.clearRect(0, 0, canvas.width, canvas.height);
	points = [];
};