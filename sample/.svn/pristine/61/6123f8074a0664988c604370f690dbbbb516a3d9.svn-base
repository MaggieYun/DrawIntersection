package net.yhte.gis.xzyun.api;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

/**
 * @author 许照云
 *
 */
public class Settings implements ISettings {

	private String path;
	private int paranum=0;
	
	/**
	 * @param path
	 */
	public Settings(String path){
		this.path = path;
		File file = new File(path);
		if(!file.exists()){
			try {
				file.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	public String get(String args){
		// TODO Auto-generated method stub
		String configuration[] = readconfig(this.path);
		String configDetail = null;
		for(int i=0;i<=paranum;i++){
			if(configuration[i].startsWith(args)){
				configDetail = configuration[i];
				break;
			}
		}
		return configDetail;
	}
		

	private String[] readconfig(String file){
		BufferedReader buffer = null;
		String[] everyline = null;
		int i=0;
		try {
			buffer = new BufferedReader(new FileReader(file));
		} catch (FileNotFoundException e1) {
			e1.printStackTrace();
		}
        String line;
        everyline=new String[30];//怎样实现定义不定长度的数组
        try {
			while( (line = buffer.readLine()) != null){
				everyline[i]=line;
				i++;
			}
			paranum=i-1;
			buffer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
        return everyline;
	}
	
	
	
	
	private void writeconfig(String file,String fromsetpara){
		BufferedWriter bw = null;
		try {
			bw= new BufferedWriter(new FileWriter(file,true));//true表示不覆盖原本文本中的内容
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
			try {
				bw.newLine();//自动换行
				bw.write(fromsetpara);
				bw.close();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	}
	
	
	
	

	@Override
	public void set(String key, String value) {
		// TODO Auto-generated method stub
//		String para=key+"="+value;
//		writeconfig(this.path,para);
		set(key,value,null);
	}

	@Override
	public void set(String key, String value, String desc) {
		// TODO Auto-generated method stub
		if(desc == null){
			String para=key+"="+value;
			writeconfig(this.path,para);
		}else
		{
			String para="#"+desc+"\r\n"+key+"="+value;
			writeconfig(this.path,para);
		}
	}

	public void set(String key, String value, String desc,Boolean flag) {		
		String para="#"+desc+"\r\n"+key+"="+value;
		String configuration[] = readconfig(this.path);
		int i=0;
		//为什么用在这里的时候，readconfig会循环读取文本中的内容，直到超出数组范围溢出？？？
		if(flag=false){//直接忽视set的数值，保持原本配置文件中的原始值不变
			for(i=0;i<=paranum;i++){
				if(configuration[i].startsWith(key)){
					break;
				}				
			}
			if(i==(paranum+1)){//原始配置文件中不包含新设置的参数，则添加
				writeconfig(this.path,para);	
			}	
		}else if(flag=true){//如果flag为true，则用set设置的值替换原始值
			for(i=0;i<=paranum;i++){
				if(configuration[i].startsWith(key)){
					configuration[i]=para;
					break;
				}
			}	
			if(i==paranum+1){
				writeconfig(this.path,para);
				//如何简便的清空文本中的内容
				//现有一个问题，将数组其他部分复制
			}else{
					BufferedWriter bw = null;
					try {
						bw= new BufferedWriter(new FileWriter(this.path,false));
						bw.write("");
						bw.close();
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					
					for(int j=0;j<=paranum;j++){
						writeconfig(this.path,configuration[j]);
				}
			}
				
		}
	}	
		
	}
	

	
	//public static void main(String[] args){
		
	//	Settings settings = new Settings("c:/ll.config");
	//	settings.get("attr");
	//}

