#coding=utf-8
import urllib
import json
import tornado.ioloop
import tornado.web

class convert:
	@classmethod   
	def get_roads(cls,roadurl):
		"""
		获取存在url地址上的道路数据，js形式转化为python可以
		处理的数组形式（字典组成的数组）
		"""
		js=urllib.urlopen(roadurl).read()
		js=js.replace("var roads =","")
		js=js.replace(";","")
		roads=json.loads(js)
		# print roads[0]["G"]["polyline"][0]
		return roads

	@classmethod   
	def gemtry_to_screen(cls,roads):
		"""
		首先将点位的地理坐标从roads字典数组中取出
		将地理坐标转化为屏幕坐标
		"""		
		xmin=13426192.883026948   #地理坐标基本数据
		ymin=3671416.5248470777
		xmax=13430755.218152719
		ymax=3674282.9134077714 
		gh=ymax - ymin           
		gw=xmax - xmin
		scaley=955/gh             #求比例尺
		scalex=550/gw

		ptgms=[]                  #从roads取出点位地理坐标   
		for x in roads:           #如何利用map(),lambda()等函数快捷的处理roads数组？？？
			ptgms.append(map(None,x["G"]["polyline"][0]))
		print ptgms
		ptscreen=[]               #存放点位屏幕坐标
		y=[0,0]
		for x in ptgms:           #求取屏幕坐标
			y[0]=scalex*(x[0]-xmin)
			y[1]=scaley*(ymax-x[1])
			ptscreen.append(y)	
		return ptscreen	


#点类		
class Vertex:
	def __init__(self,vx,vy):
		self.x=vx
		self.y=vy
		self.Segments=None   #包含该节点的路段
		self.parent = None

	
	def get_x(self):
		return self.x

	def get_y(self):
		return self.y	

	def ifclose(othervtx,value):
		if(value>0):
			buffdistance=value
		else:
			buffdistance=0
		if(self.distance(othervtx)<=buffdistance):
			return true
		else:
			return false	

	def get_distance(othervtx):
		"""
		计算两点之间的距离
		"""
		xdis=(self.get_x() - othervtx.get_x())**2;    #这种方法是否不妥，两个点的实例对象（点对象内涉及另一个实例对象）
		ydis=(self.get_y() - othervtx.get_y())**2;
		return (xdis + ydis)**0.5

	def ifequal(othervtx):
		if(self.get_x()==othervtx.get_x() and self.get_y()==othervtx.get_y()):
			return true
		else:
			return false	

	def  addSegment(segment):
		self.segment.append(segment)



class Segment:	
	def __init__(self,start,end):
		self.start=start   
		self.end=end
		self.attributes=None

	def setAttributes(self,value):
		self.attributes=value

	def getAttributes(self):
		return self.attributes

	def getopsitevtx(self,vtx):
		if(vtx.ifequal(self.start)):
			return self.end
		else:
			return self.start	
			

class Network():
	def __init__(self,roads):
		self.vertex=[]   #包含的节点的索引
		self.segments=[]
		self.roads=roads

	def parse(self):
		"""
		获取路网的各项数据信息
		"""
		for x in self.roads:
			road=x                             #获取某条路
			paths=road["G"]["polyline"]        #获取某条路的各个路段
			attributes=road["A"]               #获取某条路的属性
			for y in paths:                    #遍历路的各个分支
				path=y
				for i in range(len(path)):   #获取路径上相邻两节点
					first=path[i]
					second=path[i+1]
					firstvertex=Vertex(first[0],first[1])
					secondvetex=Vertex(second[0],second[1])

					firstvertex=self.addvtx_to_network(firstvertex)   #将节点添加进network
					secondvetex = self.addvtx_to_network(secondvetex);


					segment=Segment(firstPoint,secondPoint)     #节点组成线段
					segment.setAttributes(attributes)

					self.add_segments(segment)     #线段添加


					firstvertex.addSegment(segment)
					secondvetex.addSegment(segment)


	def add_segments(segment):
		self.segment.append(segment)

	def checkifpointexist(self,othervtx):
		vertex_size=len(self.vertex)   #网络数据（network）中已经存在的节点的数目
		for x in vertex:
			if(x.closeTo(othervtx,5)):  #如果两点靠近(距离小于5)，返回这个点本身
				return x
		return false	                #默认点尚不存在于network的节点中	

	def addvtx_to_network(self,othervtx): 
		"""
		将点添加至network
		"""
		vertex_size=len(self.vertex)
		if(vertex_size==0):               #第一个点
			self.vertex.append(othervtx)
			return othervtx
		else:
			for x in self.vertex:
				exist=checkifpointexist(othervtx)
				if(exist):
					return exist
				else:
					self.vertex.append(othervtx)
					return othervtx		



class MainHandler(tornado.web.RequestHandler):
	def get(self):
		roadurl="http://172.16.60.32/route/road.js"
		roads=convert.get_roads(roadurl)    #调用类的方法，不用实例化（convert()），即静态类
		
		ptscreen=convert.gemtry_to_screen(roads)
		self.write(str(ptscreen))









		# self.write(":".join(map(lambda point:str(point),ptscreen)))
		# self.write(json.dumps(lines[0]))
	post = get

application = tornado.web.Application([
	(r"/hello", MainHandler),
	(r"/static/(.*)", tornado.web.StaticFileHandler, {"path": r"g:/second"}),
])	


if __name__ == '__main__':
	application.listen(8888)
	tornado.ioloop.IOLoop.instance().start()
