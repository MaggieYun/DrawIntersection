#coding=utf-8
length=0
def find_best_path(start,end,pointsclass):
	openlist=[]
	closelist=[]	
	nowpoint=None
	# print start.id,end.id
	openlist.append(start)
	# print "开启列表："
	# print openlist
	flag=True
	while flag:
		nowpoint=get_nowpoint(openlist,end)
		closelist.append(nowpoint)
		openlist.remove(nowpoint)
		nowpoint.get_neighborpoint(pointsclass)


		for x in nowpoint.neighborpoint:
			if (x in closelist):
				continue
			if(not(x in openlist)):
				openlist.append(x)
				x.set_parent(nowpoint)
				x.get_g
				x.get_h(end)
				x.get_f
				# print "开启列表的id"
				# print x.id

			elif(x in openlist):
				for i in lines:
					if((nowpoint.id==i[0] and x.id==i[1]) or (nowpoint.id==i[1] and x.id==i[0])):
						temp_g=i[3]
				if((nowpoint.g+temp_g)<x.g):
					x.set_parent(nowpoint)
					x.get_g()
					x.get_f()
				else:
					continue	
			
		if((end in closelist) or (len(openlist)==0)):
			flag=False	

	return closelist	

			
def get_nowpoint(openlist,end):
	"""
	@param end 终点
	@return 找出开启列表中f值最小的节点，作为当前节点
	"""
	minlen=100000
	nowpoint=None
	for x in openlist:
		x.get_g()
		x.get_h(end)
		x.get_f()
		if(x.f<minlen):
			minlen=x.f
			nowpoint=x
	# print "当前节点、终点："
	# print nowpoint.id,end.id		
	# print "当前节点的g，h，f："
	# print nowpoint.g,nowpoint.h,nowpoint.f						
	return nowpoint

#点类		
class Point:
	def __init__(self):
		self.parent = None
		self.g = 0
		self.h = 0
		self.id = 0  
		self.neighborpoint=[] 
		

	def set_id(self,pid):
		self.id = pid

	def set_parent(self,nowpoint):   #   设置父节点
		self.parent=nowpoint

	def get_g(self):
		length=0               #   重新计算该节点的g,h,f值
		if(self.parent==None):
			self.g=0
		else:
			for x in lines:
				if((self.id==x[0] and self.parent.id==x[1]) or (self.id==x[1] and self.parent.id==x[0])):
					length=x[3]			
			self.g=self.parent.g+length

	def get_h(self,end):
		length=0
		for x in lines:
			if((self.id==x[0] and end.id==x[1]) or (self.id==x[1] and end.id==x[0])):
				length=x[3]
				# print "获取该点g值，对应点和长度"
				# print x,length
		self.h=length

	def get_f(self):
		self.f=self.g+self.h	

	def get_neighborpoint(self,pointsclass):      #     返回的都是可通过的"节点id编号"对象（未设置单向，双向）    
		for x in lines:  
			if(x[2]==True):
				if(self.id==x[0]):
					for y in pointsclass:
						if y.id==x[1]:
							self.neighborpoint.append(y)
							# print "临近节点："
							# print y.id
				elif(self.id==x[1]):
					for y in pointsclass:
						if y.id==x[0]:
							self.neighborpoint.append(y)
							# print "临近节点："
							# print y.id
				else:
					continue			
		# print self.neighborpoint							

if __name__ == '__main__':
	lines=[[1, 2, True, 357], [1, 3, True, 193], [1, 4, False, 334], [1, 5, False, 397], [1, 6, False, 104], [2, 3, True, 367], [2, 4, True, 195], [2, 5, True, 82], [2, 6, True, 320], [3, 4, True, 239], [3, 5, True, 366], [3, 6, False, 97], [4, 5, False, 151], [4, 6, True, 247], [5, 6, False, 340]]
	points=[1,2,3,4,5,6]
	s="a,b,c,d,e,f"
	ss=s.split(",")
	pointsclass=[]  #  存放点类对象（数组内存放类对象）
	result=[]
	# openlist=[]
	# closelist=[]
	# start=5
	# end=2

	for x in points:
		pid=x
		pname=ss[x-1]
		pname=Point()
		pname.set_id(pid)
		#print pname.id
		pointsclass.append(pname)

	# for x in pointsclass:
	# 	print x.id
	start=pointsclass[5]
	end=pointsclass[0]
	# print e,e.id
	# print b,b.id
	result=find_best_path(start,end,pointsclass)
	print result
	for x in result:
		print x.id	
	

