lines=[[1, 2, true, 357], [1, 3, true, 193], [1, 4, false, 334], [1, 5, false, 397], [1, 6, true, 104], [2, 3, true, 367], [2, 4, true, 195], [2, 5, true, 82], [2, 6, true, 320], [3, 4, true, 239], [3, 5, true, 366], [3, 6, false, 97], [4, 5, false, 151], [4, 6, true, 247], [5, 6, false, 340]]


points=[1,2,3,4,5,6]


openlist=[]
closelist=[]
openlist.push(start)
start=5
end=2


def first():
	minlen=100000
	nowpoint=0
	for x in range(openlist):
		x=Point()
		x.get_g()
		x.get_h(end)
		x.get_f()
		if(x.f<minlen){
			minlen=x.f
			nowpoint=x
		}		
	return nowpoint

#遍历当前节点的临近节点
def sencond(nowpoint):	
	closelist=add_closelist(nowpoint)
	neighborpoint=[]      #返回的都是可通过的节点（未设置单向，双向）
	for x in range(lines):
		if(x[2]=true){
			if(nowpoint=x[0]){
				neighborpoint.push(x[1])
			}elif(nowpoint=x[1]){
				neighborpoint.push(x[0])
			}
		}
	for x in range(neighborpoint):
		x=Point()
		if (x in closelist){
			pass
		}
		if(!(x in openlist)){
			add_openlist(x)
			x.set_father(nowpoint)
			x.get_g
			x.get_h
			x.get_f
		}else{
			for i in range(lines):
				if((nowpoint=i[0] && x=i[1])||(nowpoint=i[1] && x=i[0])){
					temp_g=i[3]
				}
			if((nowpoint.g+temp_g)<x.g){
				x.set_father(nowpoint)
				x.get_g()
				x.get_f()
			}
		}

def third():
	if((end in closelist)||(len(closelist)=0){    
		return
	}		

				
		


def set_nowpoint():


def find_best_path():



def add_openlist(x):
	openList.push(x)
	return closelist	

def delete_openlist(x):
    openlist.remove(x)

def add_closelist(x):
	closelist.push(x)
	return closelist


#点类
class Point:
	father_point=0
	g=0
	h=0
	f=0


	def set_father(nowpoint):
		point.father_point=nowpoint

	def get_g():
		for x in range(lines):
			if((point=x[0] && point.father_point=x[1]) || (point=x[1] && point.father_point=x[0])){
				length=x[3]
			}
		point.g=point.father_point.g+length

	def get_h(end):
		for x in range(lines):
			if((point=x[0] && end=x[1]) || (point=x[1] && end=x[0])){
				length=x[3]
			}
		point.h=length

	def get_f():
		point.f=point.g+point.h	