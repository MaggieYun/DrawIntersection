#coding=UTF-8
from net.yhte.gis.intersection.Line import Line
from net.yhte.gis.intersection.Canvas import Canvas
from net.yhte.gis.intersection.Point import Point
import Image,ImageDraw
import math
import os.path

class Lane:
	'''
	车道类
	'''
	def __init__(self,lid):
		self.id = lid
		self.direction = None
		self.status=None
		self.bbox=None          #求出每个lane的范围（以便之后放置箭头和文字，设置颜色）

	def set_direction(self,direction):
		self.direction = direction

	def set_picUrl(self,picUrl):
		self.picUrl = picUrl

	def get_bbox(self,canvas_size):
		'''
		暂定，还需将靠近图片中心的点偏移一定距离
		'''
		if self.id==1:
			left=self.direction.line.get_boundp(canvas_size)
		else:	
			left=self.direction.line.get_pal_boundp(self.id-1)

		right=self.direction.line.get_pal_boundp(self.id)

		offset1 = self.direction.intersection.max_lanes_num*self.direction.intersection.lane_width
		offset2 = canvas_size[0]/2-offset1-2*self.direction.intersection.lane_width
		# print offset
		if(self.direction.id == 0):
			self.bbox = (int(right[1][0]),int(right[1][1]+offset2),int(left[0][0]),int(left[0][1]-offset1))
		elif(self.direction.id == 1):
			self.bbox = (int(right[0][0]+offset1),int(right[0][1]),int(left[1][0]-offset2),int(left[1][1]))
		elif(self.direction.id == 2):
			self.bbox = (int(left[0][0]),int(left[0][1]+offset1),int(right[1][0]),int(right[1][1]-offset2))
		elif(self.direction.id == 3):
			self.bbox = (int(left[1][0]+offset2),int(left[1][1]),int(right[0][0]-offset1),int(right[0][1]))

class Direction:
	'''
	路口方向类（即路口的每个走向）
	'''
	def __init__(self,coord,did):
		self.id=did
		self.point = Point(coord[0],coord[1])
		self.lanes = []
		self.line=None
		self.linep=None  #靠近中心空白去的两个定点
		# self.leftpal_boundp=None

	def add_lane(self,lane):
		lane.set_direction(self)
		self.lanes.append(lane)

	def set_intersetion(self,intersection):
		self.intersection = intersection	

	def get_line(self,n):	
		'''
		@n：车道数
		'''
		self.line=Line(self.intersection.center,self.point)	
		self.line.set_direction(self)  #主要用于计算直线平移时的平移量
		self.line.get_k()
		self.line.get_b()
		self.line.get_boundp(size)
		self.line.get_leftpal_boundp(n)
		self.angle=self.line.get_angle()		


class Intersection:
	'''
	路口对象
	'''
	def __init__(self,uid,center):
		self.id = uid
		self.center = Point(center[0],center[1])   #(0,0)
		self.directions = []
		self.centerArea = None
		self.max_lanes_num = None  #各路口车道最多的数量
		self.lane_width = None #假设每个路口的所有车道的宽度全部相同

	def add_direction(self,direction):
		direction.set_intersetion(self)   #此处不确定是否可以直接用self代表intersection？？
		self.directions.append(direction)

	def get_centerArea(self):
		'''
		centerArea为一维数组，每个元素是元组(x,y),是中心区域多边形的各个顶点
		两两相连，因此涉及排序问题
		'''
		linelist = []

		for direction in self.directions:
			n = len(direction.lanes)   
			linep0 = self.center.move(direction.angle,self.max_lanes_num*self.lane_width)  #中心区域半径由车道数最多的路口决定
			linep1 = linep0.move(direction.angle+math.pi/2,n*self.lane_width)
			linep2 = linep0.move(direction.angle-math.pi/2,n*self.lane_width)
			direction.linep = ((linep1.x,linep1.y),(linep2.x,linep2.y))
			# print "angle=",direction.angle

		n = len(self.directions)
		for i in xrange(n-1):
			for j in xrange(i+1,n):
				if self.directions[i].angle>self.directions[j].angle:
					temp = self.directions[i]
					self.directions[i] = self.directions[j]
					self.directions[j] = temp
			
		for ele in self.directions:
			# print ele.angle,ele.linep
			linelist.append(ele.linep[1])
			linelist.append(ele.linep[0])

		self.centerArea = linelist
		return	

	def parse(self,data):
		'''
		原始数据抽象与转化
		'''
		data=data
		canvas_size=data["canvas_size"]
		directs=data["coordlist"]
		rootAddress = data["rootAddress"]
		picAddress = data["picAddress"]

		self.lane_width = data["lane_width"]

		num_lanes = []
		for direct in directs:
			num_lanes.append(len(direct[1]))  #事先求出最大车道数，便于计算bbox

		self.max_lanes_num = max(num_lanes)  #部分方法依赖该变量，因此先遍历一边directs



		dids=data["dids"]
		count = 0
		for direct in directs:
			did = dids[count]  #使用原始数据的0,1,2,3作为direction的id，可以辨别direction的方向
			count=count+1
		
			direction=Direction(direct[0],did)
			self.add_direction(direction)
			direction.get_line(len(direct[1]))
			# print "angle=",direction.angle
			for i in range(len(direct[1])):
				lane=Lane(i+1)
				direction.add_lane(lane)
				lane.get_bbox(canvas_size)

				picPath = os.path.join(rootAddress,picAddress[direct[1][i]])
				lane.set_picUrl(picPath)
		self.get_centerArea()		
			
			

if __name__ == '__main__':


	#以下信息都可从配置文件中读取
	#一般要求图片为正方形
	inter_id = {"inter_id":1}
	lane_width = {"lane_width":40}
	address = {
		"rootAddress":r"C:\intersections\pics", #图标根目录
		"picAddress":{            #图标子目录
			1:'0001w.gif',
			2:'0010w.gif',
			4:'0100w.gif',
			5:'0110w.gif',
			8:'1000w.gif',
			9:'1001w.gif',
			10:'1010w.gif',
			14:'1110w.gif',
			15:'1111w.gif',
		}

	}

	jsondata = {     #描述路口
		0:[1,2,4,1],
		# 1:[5,8,9],
		2:[10,14,15,1],
		3:[1,2,4]
	}
	size=(1000,1000)  #图片尺寸
	groundColor = "#eeeeee"  #图片底色





	im=Image.new("RGBA",size,groundColor)   #初始化一张图片，大小为整个路口的size
	draw = ImageDraw.Draw(im)
	canvas=Canvas(draw)

	

	data={"centercoord":(size[0]/2,size[1]/2),
		"canvas_size":size}

	direcAngle = {   
		0:(size[0]/2,0),
		1:(size[0],size[1]/2),
		2:(size[0]/2,size[1]),
		3:(0,size[1]/2)
	}

	coordlist = {"coordlist":[ ]}
	for (k,v) in jsondata.items():
		coordlist["coordlist"].append([direcAngle[k],v])

	
	data.update(coordlist)
	data.update(address)
	data.update({"dids":jsondata.keys()})
	data.update(inter_id)
	data.update(lane_width)

	print data


	intersection=Intersection(data["inter_id"],data["centercoord"])
	intersection.parse(data)

	for direction in intersection.directions:
		for lane in direction.lanes:	
			print lane.bbox  #每个车道的bbox，用于贴图
			print lane.picUrl
			print lane.direction.id
			pic = Image.open(lane.picUrl)
			# copypic = pic.copy()
			# copypic.thumbnail((40,80))
			temp = lane_width["lane_width"]
			resized = pic.resize((temp,2*temp))  #图片宽为车道宽，长为2倍车道宽（固定）直接影响bbox的计算

			if(lane.direction.id == 0):  #根据方向做旋转
				pic2 = resized.rotate(180)
			elif(lane.direction.id == 1):
				pic2 = resized.rotate(90)
			elif(lane.direction.id == 3):
				pic2 = resized.rotate(270)
			else:
				pic2 = resized

			im.paste(pic2,lane.bbox)

		canvas.drawline(direction.line,"red",4)   #绘制每个方向中心双黄线
		canvas.draw_left_line(direction.line,"black")  #绘制每个方向左路肩

		n=len(direction.lanes)
		for i in range(1,n+1):
			direction.line.get_pal_boundp(i)  #有待改进为面向对象
			canvas.draw_palline(direction.line,"black")    #绘制平行线 即车道
			
	canvas.draw_center_area(intersection.centerArea,"#f4f3ef","black")	 #绘制中心空白区		


	im.save(r"c:\result.png","png")	
	im.show()
